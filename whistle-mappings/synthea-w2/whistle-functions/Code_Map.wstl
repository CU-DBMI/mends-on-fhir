package main

// 2022-08-22: Removed Convert(). Moved to Utils.wstl


// ***************************************************************
//
// Functions for simple code values:
//    Code_CleanSpaces(): returns code string with multiple spaces replaced with 1 space
//    Code_MapDefault(): always returns first mapped code, 
//                may be "[code]-unharmonized" if no mapping. TODO:SE check if this is true. The system will have that suffix but not sure about the code itself.
//    Code_MapOnly(): Same as Code_MapDefault() but returns null if the code is not explicitly mapped (uses the "-unharmonized" hint from Whistle's default mapping result)
//    
// **************************************************************


// This returns the first mapped code value, if any.
// But there is always a default one created by Whistle's default approach even if not explicitly mapped.
// So there will always be a return.
// If not mapped, the returned is the same value.

// 
def CodeMapDefault(code, mapId) {
    var mappings : $HarmonizeCode("$Local", code, "omop", mapId)
    $this: mappings[0].code
}

// return null if no explicit code mapping, otherwise it ruturns the first explicit mapping

// TODO:SE  change _MapOrNull()
def CodeMapNull(code, mapId) {
    var mappings : $HarmonizeCode("$Local", code, "omop", mapId)
    var unharmonized: $StrCat(mapId, "-unharmonized")
    if ( $Not( $Eq(mappings[0].system, unharmonized ))) then {
        $this: mappings[0].code
    }
}

// returns the same code unless there is an explicit mapping to override it.

def CodeMapOverride(code, mapId) {
    var override: CodeMapNull(code, mapId)
    if $IsNotNil(override)  then {
        $this: override
    } else {
        $this: code
    }
}

// a function to normalize code values based on:
// https://hl7.org/fhir/R4/datatypes.html#code
// For now, it normalizes 1+ spaces to 1 space.

def Code_CleanSpaces(code) {
    $this: $StrJoin(" ", $StrSplit(code, " "))
}

def Id_Spaces_To_Dash(id) {
    $this: $StrJoin(".", $StrSplit(id, " "))
}

def Code_IsFHIRValid(code){

    $this: $MatchesRegex(code,"[^\\s]+(\\s[^\\s]+)*");
}

// ***************************************************************
//
// Functions for codings:
//    Coding(): returns coding() from pieces. Calls Code_CleanSpaces() to fix any extra spaces
//    _Coding_From_HCoding(): Same as Coding with null version-val due to Google bug in $HarmonizeCode()
//    Coding_MapDefault(): Returns first coding even in unmapped (code = [code]-unharmonized)
//    Coding_MapOnly(): Returns first coding only if true map else null if unharmonized
//    Coding_MapOverride(): Returns an override Coding, or builds a Coding from provided parameters.
//                          The point of this function is to be able to selectively override a code itself, it's display, etc. from source codes that wouldn't need any handeling otherwise.
//                          An override mapping, if exists, nees to provide all the needed Coding information.
//
//    Codings_MapDefault(): Returns array of codings even if unmapped
//    Codings_MapOnly(): Returns array of true codings else null
//
// **************************************************************

// Coding: Creates a FHIR Coding from the pieces 
// stub: Coding("system-val", "version-val", "code-val", "display-val")

def Coding(system, version, code, display){
    system: system
    version: version
    code: Code_CleanSpaces(code)
    // It appears in Whistle 2 the end of line comments are not working, at least in my distribution.
    // The docs say it should work. TODO: check this here https://github.com/GoogleCloudPlatform/healthcare-data-harmonization/blob/master/doc/spec.md#user-content-comments-comments
    // TODO:SE do we really want to hardcode this here?
                                    // It might be better to have a Code_MapOverride or Code_IsFHIRValid call first, by the caller, to deal with this in a more controlled way.
    display: display

}

def CodingSelected(system, version, code, display, selected){
    $this: Coding(system, version, code, display)
    userSelected: selected
}


// this returns the first found Coding even if no actual mapping
def CodingMapDefault(code, mapId) {
    var mappings : $HarmonizeCode("$Local", code, "omop", mapId)
    // TODO:SE temporary fix to remove when bug fixed.
    $this: _Coding_From_HCoding(mappings[0])
}

// this returns the first Coding only if actual mapping exists
def CodingMapNull(code, mapId) {
    // Depends on having an actually mapped code
    var mapped: CodeMapNull(code, mapId)
    if ( $IsNotNil( mapped))  then {
        $this: CodingMapDefault(code, mapId)
    }
}

// TODO:SE check if a map file is passed in. If not, just construct the Coding with provided arguments
def CodingMapOverride(system, version, code, display, selected, mapId){
    // Depends on having an actually mapped code
    var mapped: CodeMapNull(code, mapId)
    if ( $IsNotNil(mapped))  then {
        $this: CodingMapDefault(code, mapId)
        userSelected: selected
    } else {
        $this: Coding(system, version, code, display, selected)
    }
}

// this returns an array of found Codings even if no actual mapping
def CodingsMapDefault(code, mapId){
    var mappings : $HarmonizeCode("$Local", code, "omop", mapId)
    // TODO:SE remove this when bug fixed
    $this: _Coding_From_HCoding(mappings[])
}

// this returns an array of found Codings even if no actual mapping
def CodingsMapNull(code, mapId){
    if ( $IsNotNil(CodeMapNull(code, mapId)) ) then {
        // we have at least one real mapped code.
        // we can safely return the default since there will be no "whistle default".
        $this: CodingsMapDefault(code, mapId)
    }
}

// _Coding_From_HCoding: Creates a FHIR Coding from a whistle harmonized Coding
// To work around the version bug for now
// TODO: fix the whistle version bug
//  https://github.com/GoogleCloudPlatform/healthcare-data-harmonization/issues/34
def _Coding_From_HCoding(coding){
    $this: Coding(coding.system, "", coding.code, coding.display, "")
}

// ***************************************************************
//
// Functions for CodeableConcepts():
//    CodeableConcept(): returns CodeableConcept from pieces. Always returns provided text field
//    CodeableConceptMapDefault(): Returns one or more codings even in unmapped (code = [code]-unharmonized)
//                           Always returns text field
//    CodeableConceptMapNull(); Returns only true codings else null if unharmonized
//                           Always returns text field
//
// **************************************************************


// CodeableConcept: Creates a valid FHIR CodableConcept JSON object
def CodeableConcept(codings, text ){
    coding[]: codings
    text: text
}

// this returns one or more codings for a single CodeableConcept
def CodeableConceptMapDefault(code, mapId, text){
    coding[]: CodingsMapDefault(code, mapId)
    text: text
}

// this returns one or more actually mapped codings for a single CodeableConcept
def CodeableConceptMapNull(code, mapId, text){
    coding[]: CodingsMapNull(code, mapId)
    text: text
}


// this returns one CodeableConcept per Coding for the input code.
// TODO:SE i created this method with the idea that it might be useful to split
// one precoordinated source code into multiple post coordinated resutls. This 
// has to be done in coordination with the concept map file, which has to be written
// for this specific use case.
// TODO:SE This needs review and a new name to reflect it's semantics.
def NotUsed_CodeableConcepts_Map(code, mapId, text){
    var codings[]: CodingsMapDefault(code, mapId)
    $this: CodeableConcept(codings[], text)
}

def CodeableConceptsMapNull(code, mapId, text){
    var codings[]: CodingsMapNull(code, mapId)
    // we don't need to check for nil here
    // the array might be empty but this actually works well
    // the result is a single CodeableConcept instance with no coding but still with the text.
    // which is exactly the behavior we want
    $this: CodeableConcept(codings[], text)
}

def Code_System(code) {

    if (toUpper(code) == "ATC")  then {
        $this: "http://hl7.org/fhir/sid/ndc"
    }
    if (toUpper(code) == "CPT4")  then {
        $this: "http://www.ama-assn.org/go/cpt"
    }
    if (toUpper(code) == "CVX")  then {
        $this: "http://hl7.org/fhir/sid/cvx"
    }
    if (toUpper(code) == "HCPCS")  then {
        $this: "urn:oid:2.16.840.1.113883.6.14"
    }
    if (toUpper(code) == "HDC")  then {
        $this: "http://healthdatacompass.org"
    }
    if (toUpper(code) == "ICD9CM") then {
        $this: "http://hl7.org/fhir/sid/icd-9-cm"
    }
    if (toUpper(code) == "ICD9PROC")  then {
        $this: "http://hl7.org/fhir/sid/icd-9-proc"
    }
    if (toUpper(code) == "ICD10")  then {
        $this: "http://hl7.org/fhir/sid/icd-10"
    }
    if (toUpper(code) == "ICD10CM")  then {
        $this: "http://hl7.org/fhir/sid/icd-10-cm"
    }
    if (toUpper(code) == "ICD10PCS")  then {
        $this: "http://hl7.org/fhir/sid/icd-10-pcs"
    }
    if (toUpper(code) == "ISBT128")  then {
        $this: "urn:oid:2.16.840.1.113883.6.18"
    }
    if (toUpper(code) == "LOINC")  then {
        $this: "http://loinc.org"
    }
    if (toUpper(code) == "NDC")  then {
        $this: "http://hl7.org/fhir/sid/ndc"
    }
    if (toUpper(code) == "RXNORM")  then {
        $this: "http://www.nlm.nih.gov/research/umls/rxnorm"
    }
    if (toUpper(code) == "RXNORM EXTENSION") then {
        $this: "http://ohdsi.org"
    }
    if (toUpper(code) == "SNOMED")  then {
        $this: "http://snomed.info/sct"
    }
    if (toUpper(code) == "UCHEALTH_CDW")  then {
        $this: "http://uchealth.org"
    }
    if (toUpper(code) == "UCUM")  then {
        $this: "http://unitsofmeasure.org"
    }
    if (toUpper(code) == "NONE") then {
        $this: "http://ohdsi.org"
    }
    if (code == "")  then {
        $this: ""
    }
}

def Identifier_System(code) {
    if ( toLower(code) == "omop-id")  then {
        $this: "http://healthdatacompass.org/fhir/system/identifier/omop-lds"
    }
}




