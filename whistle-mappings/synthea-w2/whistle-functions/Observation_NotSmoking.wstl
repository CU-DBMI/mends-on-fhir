package main

// 2022-09-09: Add source_concept to Observation.code CodeableConcept

def Observation_NotSmoking(Observation, required context) {

// Observation_NotSmoking uses same logic as Measurement_Observation
// Field names have been changed to match column names in OMOP Observation Table

// profile_type: An internal variable to determine what type/subtype of observation profile to use.
// Other attributes assign fixed URLs or fixed codes per FHIR specification
// Does not appear in final resource
// profile_type.type = "LAB" for all labs. profile.subtype = "lab"
// profile_type.type = "VS" requires profile.subtype to determine if using sbp, dbp, hgt, wgt, bmi specific subprofiles

  var profile_type: observation_Profile(Observation)
  
  resourceType: "Observation"
  id: Observation.observation_id
  meta.profile[0]: profile_type.profileurl;
  implicitRules: ""
  language: "en-US"
  text: ""
  contained[]: ""
  extension[]: ""
  modifierExtension[]: ""

  identifier[0].use: "secondary";
  identifier[0].system: Code_System("HDC")
  identifier[0].value: Observation.observation_id

  basedOn[]: ""
  partOf[]: ""

// All OMOP Observations are final
  status: "final"
  
  category[]: Observation_Category(profile_type,Observation);
  code: Observation_Code(profile_type,Observation);


  subject: Reference("Patient", Observation.person_id)
  focus[]: ""
  encounter: Reference("Encounter", Observation.visit_occcurrence_id)
 
  if context.config.output.phi == "yes"  then {
      // effective[x], 1..1
    effectiveDateTime: ReformatDatetimeDate(Observation.observation_datetime, Observation.observation_date)
    issued: ReformatDatetimeDate(Observation.observation_datetime, Observation.observation_date)
  } else {
    effectiveDateTime: ReformatDatetimeDate("2030-01-01","2030-01-01")
    issued: ReformatDatetimeDate("2030-01-01","2030-01-01")
  }

  performer[0]: Reference("Practitioner", Observation.provider_id)


// value[x] logic is contained in Observation_Value()
// Returns dataAbsentReason if value[x] is null
  $this: Observation_Value(profile_type,Observation)


  interpretation[]: ""
  note[]: ""
  bodySite: ""
  method: ""
  specimen: ""
  device: ""

  // referenceRange, 0..*, BackboneElement
  referenceRange[0].low.value: profile_type.convert.low;
  referenceRange[0].high.value: profile_type.convert.high;
  
  hasMember[]: ""
  derivedFrom[]: ""

}


// **************************************************************
//
// Observation Functions
//
// **************************************************************

def observation_Profile(m) {

  var value_to_use: {}
  if $And($IsNotNil(m.value_as_number),m.value_as_number !=" ")  then {
    value_to_use : m.value_as_number
    } else {
      value_to_use: "None"
  }


  if $MatchesRegex(m.observation_concept_id,"4060705|4060985|4135421|4147565|4256640")  then {
    // BMI records have NULL units. Assume default fixed vaue from US Core.
    // BMI concept_ids in 4xxxxxx range are from OMOP Observations. These record do not have BMI values
    type: "VS"
    subtype: "bmi"
    codesystem: Code_System("LOINC")
    codecode: "39156-5"
    codedisplay: "Body mass index (BMI) [Ratio]"
    unit: "kg/m2"
    unitcode: "kg/m2"
    unitsystem: Code_System("UCUM")
    convert: Convert(value_to_use, m.range_low, m.range_high, "kg/m2", "kg/m2")
    profileurl: "http://hl7.org/fhir/us/core/StructureDefinition/us-core-bmi"
  }

}  


// ******************************************************************************************
// Observation_Category(): Fill in category field based on profile_type
// ******************************************************************************************
def Observation_Category(profile_type, m) {
  if (profile_type.type == "VS")  then {
    var coding: Coding("http://terminology.hl7.org/CodeSystem/observation-category","","vital-signs", "Vital Signs")
    $this: CodeableConcept(coding, "Vital Signs")
  }
  if (profile_type.type == "LAB")  then {
    var coding: Coding("http://terminology.hl7.org/CodeSystem/observation-category", "", "laboratory","Laboratory") 
    $this: CodeableConcept(coding, "Laboratory")
  }  
}

// ******************************************************************************************
// Observation_Code(): Fill in code with both standard and source codes
// *****************************************************************************************
def Observation_Code(profile_type,m){
  var codesystem: profile_type.codesystem;
  var codecode: profile_type.codecode;
  var codedisplay: profile_type.codedisplay;
  var coding[]: Coding(codesystem, "", codecode, codedisplay);

  if (m.observation_concept_code != m.observation_source_concept_code)  then {
    coding[]: Coding(Code_System(m.observation_source_vocabulary_id), "", m.observation_source_concept_code, m.observation_source_concept_name)
  }
  $this: CodeableConcept(coding,m.observation_source_value)
}

// *******************************************************************************************
// Observation_Value(): figure out how to fill out the value[x] field
// *******************************************************************************************
def Observation_Value(profile_type,m) {
  // Priority for selecting value:
  //       value_as_concept_id exists and is not 0
  //       value_as_number exists
  //       value_source_value exists
  // 

  if (ConceptHasValue(m.value_as_concept_id))  then {
  // We have a mapped value --> valueCodeableConcept
      var text: $StrFmt("%+s",m.value_as_concept_name)
      var coding: Coding(Code_System(m.value_as_concept_vocabulary_id), "", m.value_as_concept_code, text)
      valueCodeableConcept: CodeableConcept(coding,m.value_source_value)
  } else {
    if (HasValue(m.value_as_number))  then {
      // We have a number --> valueQuantity?? SHAHIM?
      valueQuantity.value : profile_type.convert.value
      if ($And($IsNotNil(m.operator_concept_id),m.operator_concept_id !=" ",m.operator_concept_id != "0"))  then {
        valueQuantity.comparator: m.operator_concept_name
      }
      valueQuantity.unit: profile_type.unit
      valueQuantity.system: profile_type.unitsystem
      valueQuantity.code: profile_type.unitcode
    } else {
      if  (HasValue(m.observation_source_value))  then {
      // We only have a source_value and nothing else --> valueString
      //valueString: $StrFmt("%s",m.observation_source_value)
      valueString: m.observation_source_value
      } else{
        // We only get here if we have nothing useful in any OMOP value fields
        // Return dataAbsentReason rather than value[x]
        dataAbsentReason : CodeableConcept(Coding("http://hl7.org/fhir/ValueSet/data-absent-reason", "", "unknown", "Unknown"),"Unknown");
      }
    }
  }
}
