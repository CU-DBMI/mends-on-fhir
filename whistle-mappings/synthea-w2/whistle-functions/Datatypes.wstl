package main

// *******************************************************************************
// 
// Functions that return/create JSON objects that conform to FHIR schema
// Listed in alphabetical order
//
// ******************************************************************************


// Address: Creates a FHIR address datatype:
def Address(use,type,state,postalcode, required context) {
    use : use
    type : type
    state : state
    if context.config.output.phi == "yes"  then {
       postalCode : postalcode
    } else {
       postalCode : "00000"
    }
}

def Period(start,end) {
// TODO: Does not check for end date before start date
// Not sure what should happen if this occurs
    start: start;
    end: end;
}


// FullURL: Create a complete URL to FHIRStore
def FullURL(baseUrl, resourceType, id) {
    $this: strFmt("%s%s%s%s%s",baseUrl, "/", resourceType, "/", id)
}



// STUB: Identifier("system-val", "value-val")
// Identifier: Creates a valid FHIR Identifier JSON object
def Identifier(system, value){
    system: system
    value: value
}


// OmopSource:  Creates a FHIR resource that holds OMOP meta data values
def OmopSource(source){
  resourceType: "Basic"

  id: "omop-source"

  var coding.code: "omop-source"
  var coding.system: Code_System("HDC")
  code.coding[]: coding

  extension[0].url: "http://compass.org/fhir/r4/extension/omop-source"

  extension[0].extension[0].url: "cdm_source_name"
  extension[0].extension[0].valueString: source.cdm_source_name

  extension[0].extension[1].url: "cdm_source_abbreviation"
  extension[0].extension[1].valueString: source.cdm_source_abbreviation

  extension[0].extension[2].url: "cdm_holder"
  extension[0].extension[2].valueString: source.cdm_holder

  extension[0].extension[3].url: "source_description"
  extension[0].extension[3].valueString: source.source_description

  extension[0].extension[4].url: "source_documentation_reference"
  extension[0].extension[4].valueString: source.source_documentation_reference

  extension[0].extension[5].url: "cdm_etl_reference"
  extension[0].extension[5].valueString: source.cdm_etl_reference

  extension[0].extension[6].url: "source_release_date"
  extension[0].extension[6].valueString: source.source_release_date

  extension[0].extension[7].url: "cdm_release_date"
  extension[0].extension[7].valueString: source.cdm_release_date

  extension[0].extension[8].url: "cdm_version"
  extension[0].extension[8].valueString: source.cdm_version

  extension[0].extension[9].url: "vocabulary_version"
  extension[0].extension[9].valueString: source.vocabulary_version
}


// Reference: Creates a FHIR Reference datatype if id not null
def Reference(resourceType, id) {
    if isNotNil(id)  then {
        reference: strFmt("%s%s%s",resourceType, "/", strFmt("%s",id));
        //type: resourceType
        //identifier.system: Code_System("HDC")
        //identifier.value: id
    }

}


// ReformatDatetime: Creates a FHIR datetime from OMOP a single datetime or date
// -07:00 is Denver TZ
def ReformatDatetime(dateTime) {
    if isNotNil(dateTime)  then {
        // TODO: SE: check split logic
        var dt: split(dateTime, " ")
        if isNotNil(dt[1])  then { // HAS DATE AND TIME
            $this: strFmt("%s%s%s%s",dt[0],"T",dt[1],"-07:00")
        } else { // HAS DATE ONLY
            $this: strFmt("%s%s%s",dt[0],"T00:00:00","-07:00")
        }
    }
}

// ReformatDatetimeDate: Creates a FHIR datetime from either a either s datatime or date
def  ReformatDatetimeDate(dateTime,date) {
    if isNotNil(dateTime)  then {
        $this: ReformatDatetime(dateTime);
    } else {
        if isNotNil(date)  then {
            $this: ReformatDatetime(date);
        }
    }    
}

